{"version":3,"sources":["components/Image.js","components/Header.js","components/Container.js","App.js","index.js"],"names":["Image","props","role","onClick","clickCount","id","aria-label","alt","name","src","image","className","Header","currentScore","topScore","Container","fluid","children","App","state","images","original","handleIncrement","setState","find","o","i","count","sort","Math","random","gameOver","console","log","forEach","element","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"uhIAceA,MARf,SAAeC,GACb,OACE,yBAAKC,KAAK,MAAMC,QAAS,kBAAMF,EAAMG,WAAWH,EAAMI,KAAKC,aAAW,cACpE,yBAAKC,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,MAAOC,UAAU,iBCazCC,MApBf,SAAgBX,GACd,OACE,yBAAKU,UAAU,iDACb,6BACE,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,YAAd,eAGA,wBAAIA,UAAU,YAAd,kBACkBV,EAAMY,aADxB,OAGA,wBAAIF,UAAU,YAAd,cACcV,EAAMa,cCRfC,MAJf,SAAmBd,GACjB,OAAO,yBAAKU,UAAS,mBAAcV,EAAMe,MAAQ,SAAW,KAAOf,EAAMgB,W,cC2E5DC,E,2MAtEbC,MAAQ,CACNN,aAAc,EACdC,SAAU,EACVM,SACAC,Y,EAGFC,gBAAkB,WAEhB,EAAKC,SAAS,CAAEV,aAAc,EAAKM,MAAMN,aAAe,K,EAG1DT,WAAa,SAAAC,GACX,EAAKc,MAAMC,OAAOI,MAAK,SAACC,EAAGC,GACzB,GAAID,EAAEpB,KAAOA,EAAI,CACf,GAAuB,IAApBe,EAAOM,GAAGC,MAKX,OAJAP,EAAOM,GAAGC,MAAQP,EAAOM,GAAGC,MAAQ,EACpC,EAAKJ,SAAS,CAACV,aAAe,EAAKM,MAAMN,aAAe,IACxD,EAAKM,MAAMC,OAAOQ,MAAK,kBAAMC,KAAKC,SAAW,OAEtC,EAEP,EAAKC,WACLC,QAAQC,IAAI,YAGhB,OAAO,M,EAIXF,SAAW,WACN,EAAKZ,MAAMN,cAAc,EAAKM,MAAML,UACrC,EAAKS,SAAS,CAACT,SAAW,EAAKK,MAAMN,eAEvC,EAAKU,SAAS,CAACV,aAAc,IAE7BO,EAAOc,SAAQ,SAAAC,GACbA,EAAQR,MAAQ,M,wEAMV,IAAD,OACP,OACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEd,aAAcuB,KAAKjB,MAAMN,aACzBC,SAAUsB,KAAKjB,MAAML,WAGtBsB,KAAKjB,MAAMC,OAAOiB,KAAI,SAAA3B,GAAK,OAC1B,kBAAC,EAAD,CACA4B,IAAK5B,EAAML,GACXD,WAAY,EAAKA,WACjBC,GAAIK,EAAML,GACVK,MAAOA,EAAMA,MACbiB,MAAOjB,EAAMiB,gB,GA1DHY,aCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.78b1e1d4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// If we want a child component to update or pass data to its parent, we can create a method inside the parent for the update\n// Then bind the method to the parent, and pass it to the child as a prop\n\nfunction Image(props) {\n  return (\n    <div role=\"img\" onClick={() => props.clickCount(props.id)} aria-label=\"click item\">\n      <img alt={props.name} src={props.image} className=\"click-item\"/>\n    </div>\n  );\n}\n\nexport default Image;\n","import React from \"react\";\r\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\r\nfunction Header(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <div>\r\n        <ul className=\"navbar-nav\">\r\n          <li className=\"nav-item\">\r\n            Clicky Game\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            Current Score: {props.currentScore}  |  \r\n          </li>\r\n          <li className=\"nav-item\">\r\n            Top Score: {props.topScore}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component }from \"react\";\nimport Image from \"./components/Image\";\nimport Header from \"./components/Header\";\nimport Container from \"./components/Container\";\nimport images from \"./images.json\"\nimport original from \"./original.json\"\n\nclass App extends Component {\n  state = {\n    currentScore: 0, \n    topScore: 0,\n    images,\n    original\n  }\n\n  handleIncrement = () => {\n    // We always use the setState method to update a component's state\n    this.setState({ currentScore: this.state.currentScore + 1 });\n  };\n\n  clickCount = id => {\n    this.state.images.find((o, i) => {\n      if (o.id === id) {\n        if(images[i].count === 0){\n          images[i].count = images[i].count + 1;\n          this.setState({currentScore : this.state.currentScore + 1});\n          this.state.images.sort(() => Math.random() - 0.5)\n          \n          return true;\n        } else {\n          this.gameOver();\n          console.log(\"gameOver\");\n        }\n      }\n      return false;\n    });\n  }\n\n  gameOver = () => {\n    if(this.state.currentScore>=this.state.topScore){\n      this.setState({topScore : this.state.currentScore});\n    }\n    this.setState({currentScore: 0});\n    \n    images.forEach(element => {\n      element.count = 0;\n    });\n    \n\n  }\n\n  render() {\n    return (\n    <Container>\n      <Header\n        currentScore={this.state.currentScore}\n        topScore={this.state.topScore}\n        >\n      </Header>\n      {this.state.images.map(image => (\n        <Image\n        key={image.id}\n        clickCount={this.clickCount} \n        id={image.id}\n        image={image.image}\n        count={image.count}\n        />\n      ))}\n      \n        \n      \n    </Container>\n    )\n  }\n}\n\n\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}